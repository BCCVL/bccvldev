version: '2.1'

services:

  # use as storage
  postgres:
    container_name: postgres
    image: hub.bccvl.org.au/postgres/postgis:9.5.0
    #ports:
    #  - "5432:5432"
    networks:
      bccvlnet:
    volumes:
      - dbdata:/var/lib/pgsql/9.5/data

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.7-management
    hostname: rabbitmq  # needed to access same config everytime
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: "${C9_PASS:-admin}"
      RABBITMQ_DEFAULT_VHOST: /
    #ports:
    #  - "5671:5671"
    #  - "5672:5672"
    #  - "15671:15671"
    #  - "15672:15672"
    networks:
      bccvlnet:
    volumes:
      - rabbitdata:/var/lib/rabbitmq

  nginx:
    container_name: nginx
    image: nginx:1.13-alpine
    volumes:
      - ./etc/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./etc/nginx.key:/etc/ssl/private/self.key:ro
      - ./etc/nginx.crt:/etc/ssl/certs/self.crt:ro
      - ./etc/_error:/var/www/bccvl/_error:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      bccvlnet:

  # container used to exchange data via ssh
  bccvlsshd:
    container_name: bccvlsshd
    build: bccvlsshd
    image: bccvlsshd
    ports:
      - "23:22"
    networks:
      bccvlnet:
    volumes:
      - ./etc/bccvl.id_rsa.pub:/etc/opt/bccvl/ssh/bccvl.id_rsa.pub
      - sharedtmp:/tmp

  # TODO: needs work... change folders to /opt layout
  #       use uwsgi? (gunicorn has a habit of timing out for long requests)
  visualiser:
    container_name: visualiser
    image: visualiser
    build:
      context: ./src
      dockerfile: Dockerfile-visualiser
    environment:
      NWORKERS: 2
      NTHREADS: 2
      #CONFIG: /opt/visualiser/docker_development.ini
    #ports:
    #  - "10600:10600"
    networks:
      bccvlnet:
    volumes:
      - sharedtmp:/var/opt/visualiser
      - ./etc/visualiser.ini:/etc/opt/visualiser/visualiser.ini
      - ./src/BCCVL_Visualiser/bccvl_visualiser:/BCCVL_Visualiser/bccvl_visualiser

  # bccvl web app
  bccvl:
    container_name: bccvl
    image: bccvl
    build:
      context: ./src
      dockerfile: Dockerfile-bccvl
      args:
        ADMIN_PASS: "${C9_PASS:-admin}"
    environment:
      # this port must match the exposed port in bccvlsshd
      SSH_PORT: 23
      PTS_LANGUAGES: en de
      zope_i18n_allowed_languages: en de
      #zope_i18n_compile_mo_files: true
      BROKER_URL: "amqp://admin:${C9_PASS:-admin}@rabbitmq/"
      ADMINS: admin@dev.bccvl.org.au
      CELERY_TIMEZONE: Australia/Brisbane
      TZ: Australia/Brisbane
    ports:
      - "8080:8080"
    networks:
      bccvlnet:
    volumes:
      - sharedtmp:/tmp
      - ./etc/zope.conf:/etc/opt/bccvl/zope/zope.conf:ro
      - ./etc/bccvl.ini:/etc/opt/bccvl/bccvl/bccvl.ini:ro
      - ./src/org.bccvl.compute/:/opt/bccvl/src/org.bccvl.compute/
      - ./src/org.bccvl.movelib/:/opt/bccvl/src/org.bccvl.movelib/
      - ./src/org.bccvl.site/:/opt/bccvl/src/org.bccvl.site/
      - ./src/org.bccvl.tasks/:/opt/bccvl/src/org.bccvl.tasks/
      - ./src/org.bccvl.testsetup/:/opt/bccvl/src/org.bccvl.testsetup/
      - ./src/org.bccvl.theme/:/opt/bccvl/src/org.bccvl.theme/
    # command: ./bin/instance fg

  # # web worker ... for backend tasks running inside plone context
  bccvl_worker:
    container_name: bccvl_worker
    image: bccvl
    build:
      context: ./src
      dockerfile: Dockerfile-bccvl
      args:
        ADMIN_PASS: "${C9_PASS:-admin}"
    environment:
      # this port must match the exposed port in bccvlsshd
      SSH_PORT: 23
      PTS_LANGUAGES: en de
      zope_i18n_allowed_languages: en de
      #zope_i18n_compile_mo_files: true
      BROKER_URL: "amqp://admin:${C9_PASS:-admin}@rabbitmq/"
      ADMINS: admin@dev.bccvl.org.au
      CELERYD_CONCURRENCY: 1
      CELERY_TIMEZONE: Australia/Brisbane
      CELERY_RDB_HOST: 0.0.0.0
      TZ: Australia/Brisbane
    networks:
      bccvlnet:
    volumes:
      - sharedtmp:/tmp
      - ./etc/bccvl.ini:/etc/opt/bccvl/bccvl/bccvl.ini:ro
      - ./etc/zope.conf:/etc/opt/bccvl/zope/zope.conf
      - ./src/org.bccvl.compute/:/opt/bccvl/src/org.bccvl.compute/
      - ./src/org.bccvl.movelib/:/opt/bccvl/src/org.bccvl.movelib/
      - ./src/org.bccvl.site/:/opt/bccvl/src/org.bccvl.site/
      - ./src/org.bccvl.tasks/:/opt/bccvl/src/org.bccvl.tasks/
      - ./src/org.bccvl.testsetup/:/opt/bccvl/src/org.bccvl.testsetup/
      - ./src/org.bccvl.theme/:/opt/bccvl/src/org.bccvl.theme/
    command: su bccvl -c "./bin/celery worker --app=org.bccvl.tasks --queues=plone --hostname=plone@bccvl -I org.bccvl.tasks.plone"

  # datamover worker ... backend process
  datamover_worker:
    container_name: datamover_worker
    image: bccvl
    build:
      context: ./src
      dockerfile: Dockerfile-bccvl
      args:
        ADMIN_PASS: "${C9_PASS:-admin}"
    environment:
      #ST_AUTH: http://192.168.99.100:5050/auth/v1.0/
      #ST_USER: test:tester
      #ST_KEY: testing

      # OS_AUTH_URL: http://192.168.99.100:5050/auth/v1/
      # OS_USERNAME: test:tester
      # OS_PASSWORD: testing
      # this port must match the exposed port in bccvlsshd
      SSH_PORT: 23
      PTS_LANGUAGES: en de
      zope_i18n_allowed_languages: en de
      #zope_i18n_compile_mo_files: true
      BROKER_URL: "amqp://admin:${C9_PASS:-admin}@rabbitmq/"
      ADMINS: admin@dev.bccvl.org.au
      CELERYD_CONCURRENCY: 2
      CELERY_TIMEZONE: Australia/Brisbane
      CELERY_RDB_HOST: 0.0.0.0
      TZ: Australia/Brisbane
    networks:
      bccvlnet:
    volumes:
      - sharedtmp:/tmp
      - ./etc/bccvl.ini:/etc/opt/bccvl/bccvl/bccvl.ini:ro
      - ./src/org.bccvl.compute/:/opt/bccvl/src/org.bccvl.compute/
      - ./src/org.bccvl.movelib/:/opt/bccvl/src/org.bccvl.movelib/
      - ./src/org.bccvl.site/:/opt/bccvl/src/org.bccvl.site/
      - ./src/org.bccvl.tasks/:/opt/bccvl/src/org.bccvl.tasks/
      - ./src/org.bccvl.testsetup/:/opt/bccvl/src/org.bccvl.testsetup/
      - ./src/org.bccvl.theme/:/opt/bccvl/src/org.bccvl.theme/
      - ./etc/bccvl.id_rsa:/opt/bccvl/.ssh/id_rsa
      - ./etc/bccvl.id_rsa.pub:/opt/bccvl/.ssh/id_rsa.pub
      - ./etc/bccvl.id_rsa:/root/.ssh/id_rsa
      - ./etc/bccvl.id_rsa.pub:/root/.ssh/id_rsa.pub
    command: su bccvl -c "./bin/celery worker --app=org.bccvl.tasks --queues=datamover --hostname=datamover@bccvl -I org.bccvl.tasks.export_services,org.bccvl.tasks.datamover"

  # TODO: really build it? or rather do build step as with bccvl?
  #       BCCVL_CONFIG variable .. see entrypoint pattern in bccvl
  worker:
    container_name: worker
    image: worker
    build:
        context: ./src
        dockerfile: Dockerfile-worker
    environment:
      ST_AUTH: http://192.168.99.100:5050/auth/v1.0/
      ST_USER: test:tester
      ST_KEY: testing
      # OS_AUTH_URL: http://192.168.99.100:5050/auth/v1/
      # OS_USERNAME: test:tester
      # OS_PASSWORD: testing
      # BCCVL specific
      BCCVL_CONFIG: /etc/opt/worker/bccvl.ini
      # CELERY CONFIG
      BROKER_URL: "amqp://admin:${C9_PASS:-admin}@rabbitmq/"
      ADMINS: g.weis@griffith.edu.au
      CELERY_TIMEZONE: Australia/Brisbane
      CELERYD_CONCURRENCY: 2
      TZ: Australia/Brisbane
      CELERY_RDB_HOST: 0.0.0.0
      WORKDIR: /var/opt/worker/workdir
    volumes:
      - sharedtmp:/var/opt/worker
      - ./src/org.bccvl.compute/:/opt/worker/org.bccvl.compute/
      - ./src/org.bccvl.movelib/:/opt/worker/org.bccvl.movelib/
      - ./src/org.bccvl.tasks/:/opt/worker/org.bccvl.tasks/
      - ./etc/bccvl.ini:/etc/opt/worker/bccvl.ini:ro
      - ./etc/bccvl.id_rsa:/opt/worker/.ssh/id_rsa
      - ./etc/bccvl/.id_rsa.pub:/opt/worker/.ssh/id_rsa.pub
      - ./etc/bccvl.id_rsa:/root/.ssh/id_rsa
      - ./etc/bccvl.id_rsa.pub:/root/.ssh/id_rsa.pub
    ports:
      - "6900-6020:6900-6020"
    networks:
      bccvlnet:
    command: celery worker --app=org.bccvl.tasks --loglevel=INFO --queues=worker --hostname=worker@bccvl -I org.bccvl.tasks.compute

networks:
  bccvlnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/24

volumes:
  # used to store data for postgress
  dbdata:
    driver: local
  # used as shared storage ... needed for ssh transfer between containers
  sharedtmp:
    driver: local
  # rabbitmq storage
  rabbitdata:
    driver: local
